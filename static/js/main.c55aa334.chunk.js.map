{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StyledContainer","styled","Container","MenuExampleTabularOnLeft","state","activeItem","segmentText","bio","links","contact","handleItemClick","e","name","setState","this","textAlign","Grid","Column","width","Menu","fluid","vertical","tabular","Item","active","onClick","content","stretched","Segment","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4ZAIA,IAAMA,EAAkBC,YAAOC,IAAPD,CAAH,KAIAE,E,4MACnBC,MAAQ,CACNC,WAAY,MACZC,YAAa,CACXC,IAAK,mzBASLC,MAAO,iWAIPC,QAAS,0M,EAObC,gBAAkB,SAACC,EAAD,OAAKC,EAAL,EAAKA,KAAL,OAAe,EAAKC,SAAS,CAACR,WAAYO,K,uDAElD,IAAD,EAC2BE,KAAKV,MAAhCC,EADA,EACAA,WAAYC,EADZ,EACYA,YAEnB,OACE,kBAACN,EAAD,CAAiBe,UAAW,UAC1B,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,MAAO,GAClB,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,UAAQ,EAACC,SAAO,GAC1B,kBAACH,EAAA,EAAKI,KAAN,CACEX,KAAK,MACLY,OAAuB,QAAfnB,EACRoB,QAASX,KAAKJ,kBAEhB,kBAACS,EAAA,EAAKI,KAAN,CACEG,QAAS,mBACTd,KAAK,QACLY,OAAuB,UAAfnB,EACRoB,QAASX,KAAKJ,kBAEhB,kBAACS,EAAA,EAAKI,KAAN,CACEX,KAAK,UACLY,OAAuB,YAAfnB,EACRoB,QAASX,KAAKJ,oBAKpB,kBAACM,EAAA,EAAKC,OAAN,CAAaU,WAAS,EAACT,MAAO,IAC5B,kBAACU,EAAA,EAAD,CAASC,wBAAyB,CAACC,OAAQxB,EAAYD,a,GAtDb0B,aCIlCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c55aa334.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Grid, Menu, Segment} from 'semantic-ui-react';\nimport styled from \"styled-components\";\n\nconst StyledContainer = styled(Container)`\n\tmargin-top: 5%\n`;\n\nexport default class MenuExampleTabularOnLeft extends Component {\n  state = {\n    activeItem: 'bio',\n    segmentText: {\n      bio: '<h2>Hi, I am Tahmid</h2> <h4>I like to play with computers. I am currently working as a Software Engineer ' +\n        'at <a href=\"https://newscred.com/\" target=\"_blank\">NewsCred</a>, and my team name is ' +\n        '<strong>Public API</strong>. The absence of fancy design and styling in my website is evident that ' +\n        'I mostly work in backend. But, like a wise man once said, looks can be deceiving! ' +\n        '<br><br>I actually am a FullStack Engineer (no, my stack does not overflow if you give me a task) with experience ' +\n        'in Python, Node and ReactJS.<br><br>In my free time, I like to break stuff in the name of building ' +\n        'something beautiful. Also, I am highly interested in problem solving, and like to read about various ' +\n        'Computer Science stuff.</h4><br>Did I mention that I can discuss ' +\n        '<strong>Distributed System Design</strong> over coffee for hours?',\n      links: '<h4>What you seek is seeking you!</h4>' +\n        '<strong><a href=\"https://github.com/tahmid-choyon\" target=\"_blank\">Github</a></strong><br>' +\n        '<strong><a href=\"https://www.linkedin.com/in/tahmid-choyon/\" target=\"_blank\">LinkedIn</a></strong><br>' +\n        '<strong><a href=\"https://drive.google.com/open?id=1Q0lXCvQNli16xssMJgAOQQyOiEFHOI9R\" target=\"_blank\">Resume</a></strong>',\n      contact: '<h4>Email: <a href=\"mailto:tahmid.choyon@gmail.com\">tahmid.choyon@gmail.com</a></h4>' +\n        'or' +\n        '<h4>Drop a message in my <a href=\"https://www.linkedin.com/in/tahmid-choyon/\" target=\"_blank\">LinkedIn</a></h4>'\n    }\n\n  }\n\n  handleItemClick = (e, {name}) => this.setState({activeItem: name})\n\n  render() {\n    const {activeItem, segmentText} = this.state;\n\n    return (\n      <StyledContainer textAlign={'center'}>\n        <Grid>\n          <Grid.Column width={4}>\n            <Menu fluid vertical tabular>\n              <Menu.Item\n                name='bio'\n                active={activeItem === 'bio'}\n                onClick={this.handleItemClick}\n              />\n              <Menu.Item\n                content={'Links and Resume'}\n                name='links'\n                active={activeItem === 'links'}\n                onClick={this.handleItemClick}\n              />\n              <Menu.Item\n                name='contact'\n                active={activeItem === 'contact'}\n                onClick={this.handleItemClick}\n              />\n            </Menu>\n          </Grid.Column>\n\n          <Grid.Column stretched width={12}>\n            <Segment dangerouslySetInnerHTML={{__html: segmentText[activeItem]}}/>\n          </Grid.Column>\n        </Grid>\n      </StyledContainer>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}